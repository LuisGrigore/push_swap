# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    waa.txt                                            :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: lgrigore <lgrigore@student.42madrid.com    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2025/09/05 19:32:06 by lgrigore          #+#    #+#              #
#    Updated: 2025/09/05 19:59:00 by lgrigore         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

#include "node_data.h"
#include "target.h"
#include <limits.h>

static int	get_target_not_smallest(t_double_stack *stack, int b_idx)
{
	t_dll_node	*current_a;
	t_node_data	*data_a;
	int			target_idx;

	current_a = stack->a->head;
	target_idx = INT_MAX;
	while (current_a)
	{
		data_a = (t_node_data *)current_a->data;
		if (data_a->index > b_idx && data_a->index < target_idx)
			target_idx = data_a->index;
		current_a = current_a->next;
	}
	return (target_idx);
}

static int	get_target_smallest(t_double_stack *stack)
{
	t_dll_node	*current_a;
	t_node_data	*data_a;
	int			target_idx;

	current_a = stack->a->head;
	target_idx = INT_MAX;
	while (current_a)
	{
		data_a = (t_node_data *)current_a->data;
		if (data_a->index < target_idx)
			target_idx = data_a->index;
		current_a = current_a->next;
	}
	return (target_idx);
}

int	get_target(t_double_stack *stack, int b_idx)
{
	int			target_idx;

	target_idx = get_target_not_smallest(stack, b_idx);
	if (target_idx != INT_MAX)
		return (target_idx);
	return (get_target_smallest(stack));
}
